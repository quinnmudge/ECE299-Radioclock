import machine
import time
from machine import Pin, SPI
from ssd1306 import SSD1306_SPI
import framebuf


# Define columns and rows of the OLED display
SCREEN_WIDTH = 128
SCREEN_HEIGHT = 64


# Initialize I/O pins associated with the OLED display SPI interface
spi_sck = Pin(18)
spi_sda = Pin(19)
spi_res = Pin(21)
spi_dc = Pin(20)
spi_cs = Pin(17)


# SPI Device ID
SPI_DEVICE = 0


# Initialize the SPI interface for the OLED display
oled_spi = SPI(SPI_DEVICE, baudrate=100000, sck=spi_sck, mosi=spi_sda)


# Initialize the display
oled = SSD1306_SPI(SCREEN_WIDTH, SCREEN_HEIGHT, oled_spi, spi_dc, spi_res, spi_cs, True)


# Define pin number for the button
button_pin = machine.Pin(0, machine.Pin.IN, machine.Pin.PULL_DOWN)


# Variables for debouncing
button_state = 0
last_button_state = 0
last_debounce_time = 0
debounce_delay = 50


# Counter variable
count = 0


# Function to update the OLED display
def update_display():
    oled.fill(0)
    oled.text("Welcome to ECE", 0, 0)
    oled.text("299", 45, 10)
    oled.text("Count is: %4d" % count, 0, 30)
    oled.rect(0, 50, 128, 5, 1)
    oled.show()


# Initial display update
update_display()


while True:
    # Step 1: Read the current state of the button
    reading = button_pin.value()


    # Step 2: Check if the current reading is different from the last stable state
    if reading != last_button_state:
        # Step 3: If the reading is different, reset the debouncing timer
        last_debounce_time = time.ticks_ms()
   
    # Step 4: Check if the debounce delay has passed
    if (time.ticks_diff(time.ticks_ms(), last_debounce_time) > debounce_delay):
        # Step 5: If the delay has passed, check if the current reading is different from the last stable button state
        if reading != button_state:
            # Step 6: If the reading is different, update the stable button state
            button_state = reading
            # Step 7: If the new stable button state is HIGH (button pressed), increment the counter and update the display
            if button_state == 1:
                count += 1
                update_display()


    # Step 8: Save the current reading as the last stable state for the next loop iteration
    last_button_state = reading





